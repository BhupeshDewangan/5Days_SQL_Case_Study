1. You're working as a market analyst for a mobile app development company. Your task is to identify the most promising categories (TOP 5) for launching new free apps based on their average ratings.

select category, round(avg(rating) :: numeric, 2) as avgr
from public."Google_Play_Store"
where app_type = 'Free'
group by category
order by avgr desc
limit 5



2. As a business strategist for a mobile app company, your objective is to pinpoint the three categories that generate the most revenue from paid apps. This calculation is based on the product of the app price and its number of installations.

select category, round(installs :: numeric * price :: numeric) as app_rev from public."Google_Play_Store"
where app_type = 'Paid'
group by category, app_rev
order by app_rev desc
limit 3



3. As a data analyst for a gaming company, you're tasked with calculating the percentage of games within each category. This information will help the company understand the distribution of gaming apps across different categories.


select *, round((cnt :: float / (select count(*) from public."Google_Play_Store" ) :: float) :: numeric * 100, 2) as perce from
(
	select category, count(app) as cnt from public."Google_Play_Store"
	group by category
	order by cnt desc 
)
limit 5



4. As a data analyst at a mobile app-focused market research firm you’ll recommend whether the company should develop paid or free apps for each category based on the ratings of that category.


with cte1 as 
(
	select category, round(avg(rating) ::numeric, 2) as avgr1 from public."Google_Play_Store"
	where app_type = 'Paid'
	group by category
), 
cte2 as 
(
	select category, round(avg(rating) ::numeric, 2) as avgr2 from public."Google_Play_Store"
	where app_type = 'Free'
	group by category

)


select *, (case when avgr1 > avgr2 then 'Develop "Paid" Apps' else 'Develop "Free" Apps' end) as Decision from
(
	select cte1.category, cte1.avgr1, cte2.avgr2 from cte1 inner join cte2 on cte1.category = cte2.category 
)


5.Suppose you're a database administrator your databases have been hacked and hackers are changing price of certain apps on the database, it is taking long for IT team to neutralize the hack, however you as a responsible manager don’t want your data to be changed, do some measure where the changes in price can be recorded as you can’t stop hackers from making changes.

{
-- 1.
CREATE TABLE price_audit (
    app text,
    old_price text,
    new_price text,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    changed_by text
);

-- 2
CREATE OR REPLACE FUNCTION log_price_changes()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO price_audit (app, old_price, new_price, changed_by)
    VALUES (NEW.app, OLD.price, NEW.price, SESSION_USER);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 3

select * from public."Google_Play_Store"

-- 4. 

CREATE TRIGGER price_change_trigger
BEFORE UPDATE ON public."Google_Play_Store"
FOR EACH ROW
WHEN (OLD.price IS DISTINCT FROM NEW.price)
EXECUTE FUNCTION log_price_changes();


-- 5

UPDATE public."Google_Play_Store" SET price = 5.99 WHERE app_size = '2.8M' and current_ver = '1.1';

-- 6.
select * from public."price_audit"
}





6. Your IT team have neutralized the threat; however, hackers have made some changes in the prices, but because of your measure you have noted the changes, now you want correct data to be inserted into the database again.


select a.app, a.app_size, a.price, a.current_ver, b.new_price, b.old_price 
from public."Google_Play_Store" as a 
inner join
public."price_audit" as b 
on a.app = b.app


update public."Google_Play_Store"  
set price = b.old_price 
from public."price_audit" as b 
where public."Google_Play_Store".app = b.app



7. As a data person you are assigned the task of investigating the correlation between two numeric factors: app ratings and the quantity of reviews.


select round(corr(rating :: numeric, reviews :: numeric) :: numeric , 3) as crr from public."Google_Play_Store"



8. Your boss noticed  that some rows in genres columns have multiple genres in them, which was creating issue when developing the  recommender system from the data he/she assigned you the task to clean the genres column and make two genres out of it, rows that have only one genre will have other column as blank.


select trim(SPLIT_PART(genres, ';', 1)) as genre1, trim(SPLIT_PART(genres, ';', 2)) as genre2 from public."Google_Play_Store"



9. Your senior manager wants to know which apps are not performing as par in their particular category, however he is not interested in handling too many files or list for every  category and he/she assigned  you with a task of creating a dynamic tool where he/she  can input a category of apps he/she  interested in  and your tool then provides real-time feedback by displaying apps within that category that have ratings lower than the average rating for that specific category.


create or replace function
get_under_perfoapp(category_inp varchar)
returns table(
	app text,
	category text,
	rating double precision
) as $$
begin
	return query
	select a.app, a.category, a.rating from public."Google_Play_Store" a where a.category = category_inp
	and a.rating < (select avg(b.rating) from public."Google_Play_Store" b where b.category = category_inp);
end;
$$ language plpgsql;


select * from get_unapp('ART_AND_DESIGN')